// Code generated by go-swagger; DO NOT EDIT.

package organizations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"

	"wash-payment/internal/pkg/openapi/models"
)

// TransactionsOKCode is the HTTP code returned for type TransactionsOK
const TransactionsOKCode int = 200

/*
TransactionsOK OK

swagger:response transactionsOK
*/
type TransactionsOK struct {

	/*
	  In: Body
	*/
	Payload *models.TransactionPage `json:"body,omitempty"`
}

// NewTransactionsOK creates TransactionsOK with default headers values
func NewTransactionsOK() *TransactionsOK {

	return &TransactionsOK{}
}

// WithPayload adds the payload to the transactions o k response
func (o *TransactionsOK) WithPayload(payload *models.TransactionPage) *TransactionsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the transactions o k response
func (o *TransactionsOK) SetPayload(payload *models.TransactionPage) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *TransactionsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

func (o *TransactionsOK) TransactionsResponder() {}

// TransactionsForbiddenCode is the HTTP code returned for type TransactionsForbidden
const TransactionsForbiddenCode int = 403

/*
TransactionsForbidden Forbidden

swagger:response transactionsForbidden
*/
type TransactionsForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewTransactionsForbidden creates TransactionsForbidden with default headers values
func NewTransactionsForbidden() *TransactionsForbidden {

	return &TransactionsForbidden{}
}

// WithPayload adds the payload to the transactions forbidden response
func (o *TransactionsForbidden) WithPayload(payload *models.Error) *TransactionsForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the transactions forbidden response
func (o *TransactionsForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *TransactionsForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

func (o *TransactionsForbidden) TransactionsResponder() {}

// TransactionsNotFoundCode is the HTTP code returned for type TransactionsNotFound
const TransactionsNotFoundCode int = 404

/*
TransactionsNotFound Not found

swagger:response transactionsNotFound
*/
type TransactionsNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewTransactionsNotFound creates TransactionsNotFound with default headers values
func NewTransactionsNotFound() *TransactionsNotFound {

	return &TransactionsNotFound{}
}

// WithPayload adds the payload to the transactions not found response
func (o *TransactionsNotFound) WithPayload(payload *models.Error) *TransactionsNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the transactions not found response
func (o *TransactionsNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *TransactionsNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

func (o *TransactionsNotFound) TransactionsResponder() {}

/*
TransactionsDefault Internal error

swagger:response transactionsDefault
*/
type TransactionsDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewTransactionsDefault creates TransactionsDefault with default headers values
func NewTransactionsDefault(code int) *TransactionsDefault {
	if code <= 0 {
		code = 500
	}

	return &TransactionsDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the transactions default response
func (o *TransactionsDefault) WithStatusCode(code int) *TransactionsDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the transactions default response
func (o *TransactionsDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the transactions default response
func (o *TransactionsDefault) WithPayload(payload *models.Error) *TransactionsDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the transactions default response
func (o *TransactionsDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *TransactionsDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

func (o *TransactionsDefault) TransactionsResponder() {}

type TransactionsNotImplementedResponder struct {
	middleware.Responder
}

func (*TransactionsNotImplementedResponder) TransactionsResponder() {}

func TransactionsNotImplemented() TransactionsResponder {
	return &TransactionsNotImplementedResponder{
		middleware.NotImplemented(
			"operation authentication.Transactions has not yet been implemented",
		),
	}
}

type TransactionsResponder interface {
	middleware.Responder
	TransactionsResponder()
}
