// Code generated by go-swagger; DO NOT EDIT.

package organizations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"wash-payment/internal/app/entity"
)

// SetServicePricesHandlerFunc turns a function with the right signature into a set service prices handler
type SetServicePricesHandlerFunc func(SetServicePricesParams, *entity.Auth) SetServicePricesResponder

// Handle executing the request and returning a response
func (fn SetServicePricesHandlerFunc) Handle(params SetServicePricesParams, principal *entity.Auth) SetServicePricesResponder {
	return fn(params, principal)
}

// SetServicePricesHandler interface for that can handle valid set service prices params
type SetServicePricesHandler interface {
	Handle(SetServicePricesParams, *entity.Auth) SetServicePricesResponder
}

// NewSetServicePrices creates a new http.Handler for the set service prices operation
func NewSetServicePrices(ctx *middleware.Context, handler SetServicePricesHandler) *SetServicePrices {
	return &SetServicePrices{Context: ctx, Handler: handler}
}

/*
	SetServicePrices swagger:route PUT /organizations/{id}/service-prices Organizations setServicePrices

# Set service prices

Set prices for services for the specified organization
*/
type SetServicePrices struct {
	Context *middleware.Context
	Handler SetServicePricesHandler
}

func (o *SetServicePrices) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewSetServicePricesParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *entity.Auth
	if uprinc != nil {
		principal = uprinc.(*entity.Auth) // this is really a entity.Auth, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
