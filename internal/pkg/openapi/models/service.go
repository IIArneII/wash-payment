// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Service Service, for the use of which the payment was made
//
// swagger:model Service
type Service string

func NewService(value Service) *Service {
	return &value
}

// Pointer returns a pointer to a freshly-allocated Service.
func (m Service) Pointer() *Service {
	return &m
}

const (

	// ServiceBonus captures enum value "bonus"
	ServiceBonus Service = "bonus"

	// ServiceSbp captures enum value "sbp"
	ServiceSbp Service = "sbp"
)

// for schema
var serviceEnum []interface{}

func init() {
	var res []Service
	if err := json.Unmarshal([]byte(`["bonus","sbp"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceEnum = append(serviceEnum, v)
	}
}

func (m Service) validateServiceEnum(path, location string, value Service) error {
	if err := validate.EnumCase(path, location, value, serviceEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this service
func (m Service) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateServiceEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this service based on context it is used
func (m Service) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
