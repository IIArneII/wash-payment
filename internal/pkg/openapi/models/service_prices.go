// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServicePrices Prices for services for a specific organization in kopecks (RUB * 10^2)
//
// swagger:model ServicePrices
type ServicePrices struct {

	// bonus
	// Required: true
	// Minimum: 0
	Bonus *int64 `json:"bonus"`

	// sbp
	// Required: true
	// Minimum: 0
	Sbp *int64 `json:"sbp"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (m *ServicePrices) UnmarshalJSON(data []byte) error {
	var props struct {

		// bonus
		// Required: true
		// Minimum: 0
		Bonus *int64 `json:"bonus"`

		// sbp
		// Required: true
		// Minimum: 0
		Sbp *int64 `json:"sbp"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	m.Bonus = props.Bonus
	m.Sbp = props.Sbp
	return nil
}

// Validate validates this service prices
func (m *ServicePrices) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBonus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSbp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServicePrices) validateBonus(formats strfmt.Registry) error {

	if err := validate.Required("bonus", "body", m.Bonus); err != nil {
		return err
	}

	if err := validate.MinimumInt("bonus", "body", *m.Bonus, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *ServicePrices) validateSbp(formats strfmt.Registry) error {

	if err := validate.Required("sbp", "body", m.Sbp); err != nil {
		return err
	}

	if err := validate.MinimumInt("sbp", "body", *m.Sbp, 0, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this service prices based on context it is used
func (m *ServicePrices) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ServicePrices) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServicePrices) UnmarshalBinary(b []byte) error {
	var res ServicePrices
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
