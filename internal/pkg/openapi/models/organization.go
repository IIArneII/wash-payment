// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Organization organization
//
// swagger:model Organization
type Organization struct {

	// Balance in kopecks (RUB * 10^2)
	// Required: true
	// Minimum: 0
	Balance *int64 `json:"balance"`

	// description
	// Required: true
	Description *string `json:"description"`

	// display name
	// Required: true
	DisplayName *string `json:"displayName"`

	// id
	// Required: true
	// Format: uuid
	ID *strfmt.UUID `json:"id"`

	// name
	// Required: true
	Name *string `json:"name"`

	// service prices
	// Required: true
	ServicePrices *ServicePrices `json:"servicePrices"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (m *Organization) UnmarshalJSON(data []byte) error {
	var props struct {

		// Balance in kopecks (RUB * 10^2)
		// Required: true
		// Minimum: 0
		Balance *int64 `json:"balance"`

		// description
		// Required: true
		Description *string `json:"description"`

		// display name
		// Required: true
		DisplayName *string `json:"displayName"`

		// id
		// Required: true
		// Format: uuid
		ID *strfmt.UUID `json:"id"`

		// name
		// Required: true
		Name *string `json:"name"`

		// service prices
		// Required: true
		ServicePrices *ServicePrices `json:"servicePrices"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	m.Balance = props.Balance
	m.Description = props.Description
	m.DisplayName = props.DisplayName
	m.ID = props.ID
	m.Name = props.Name
	m.ServicePrices = props.ServicePrices
	return nil
}

// Validate validates this organization
func (m *Organization) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBalance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisplayName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServicePrices(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Organization) validateBalance(formats strfmt.Registry) error {

	if err := validate.Required("balance", "body", m.Balance); err != nil {
		return err
	}

	if err := validate.MinimumInt("balance", "body", *m.Balance, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *Organization) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *Organization) validateDisplayName(formats strfmt.Registry) error {

	if err := validate.Required("displayName", "body", m.DisplayName); err != nil {
		return err
	}

	return nil
}

func (m *Organization) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Organization) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *Organization) validateServicePrices(formats strfmt.Registry) error {

	if err := validate.Required("servicePrices", "body", m.ServicePrices); err != nil {
		return err
	}

	if m.ServicePrices != nil {
		if err := m.ServicePrices.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("servicePrices")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("servicePrices")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this organization based on the context it is used
func (m *Organization) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateServicePrices(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Organization) contextValidateServicePrices(ctx context.Context, formats strfmt.Registry) error {

	if m.ServicePrices != nil {

		if err := m.ServicePrices.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("servicePrices")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("servicePrices")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Organization) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Organization) UnmarshalBinary(b []byte) error {
	var res Organization
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
